from abc import ABC, abstractmethod
from typing import List


class EncryptInterface(ABC):
    """Encrypt is a class responsible to encryption process"""

    @abstractmethod
    def __init__(self, key: str) -> None:
        """
        Args:
            key (str): key generated by fernet, used to encrypt and decrypt
        Raises:
            Exception: Invalid key
        """
        raise NotImplementedError()
        raise Exception()

    @abstractmethod
    def encrypt(self, data: List[str]) -> List[str]:
        """Encrypt

        Args:
            data (List[str]): List with strings to encrypt

        Returns:
            List[str]: List with string encrypt
        """
        raise NotImplementedError()

    @abstractmethod
    def decrypt(self, data: List[str]) -> List[str]:
        """Decrypt

        Args:
            data (List[str]): List with string to decrypt, generated by encrypt

        Returns:
            List[str]: List with string decrypt
        """
        raise NotImplementedError()
